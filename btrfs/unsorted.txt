Dumping ground for anything, no details. Some prototypes exist. Incomplete
list.

# Kernel

## Core

- finish conversions to xarray, the API provides preallocation and safe locked
  checks for presence of the empty item or racing insert
- add tracepoints for heuristic
- uevents
- transaction context to replace GFP_NOFS
- background readahead
- tree checker enhancements
- iomap
- snapshot aware defrag again
- configurable allocators
- emergency decompression buffer
- subvolume level encryption
- per subvolume raid levels
- autodefrag to its own threads
- assertions for setget helpers
- extended debugging (ioctl, sysfs, bpf)
- faster key in node/leaf search, cache friendly, optimize jumps
- remove async commit (ioctl and related functionality)
- cache for all scrub pages
- error handling and BUG_ON removal
- recursive snapshots
- swapfile based on direct io
- own page for superblock writing (no pagecache)
- backref cycle verification
- (done) cgroup integrations
- (done) io_uring integrations, find what's still missing
- (done for metadata) subpage finish
- (no, discontinued upstream) DAX
- (no, superseded by rst) write intent bitmap for raid56
- (done) fs_context conversion
- (no, API hard to use right, questional benefits) asynchronous checksumming
  (API change or switch on demand)
- (done) realtime zstd levels

## Fixes

- fix heuristic, running 2x
- seeding remount bug, snapshot deletion
- seeding writable device tracking

## Cleanups

- named allocations from generic slabs, sysfs stats
- reduce RCU string usage, possibly remove
- refactor extent_io_tree, simple range+status tracking
- bios
- int type unifications, remove size_t other than interfaces, pgoff_t, u64
  otherwise
- (continued) reduce arguments, sink constants
- (continued) standalone includes
- (continued) iwyu, use LSP with editor
- (almost done) get rid of indirect function calls
- (done in 6.10, watch) reduce btrfs_inode size, get size under 1024 in
  maximal config

## UI

- configurable message ids
- synthetic properties and flag representation
- sysfs updates
- per transaction mount options
- per subvolume mount options (remount is the problem, revisit after new mount
  API)
- properties for all flags
- (done) async discard by default
- (done) enhance compression error messages

## Features

- authenticated hashes, v3
- ioctl clear free space
- ioctl scrub a given subvolume
- ioctl scrub to track status in kernel, in persistent items
- ioctl for block based deduplication (memory only)
- ioctl defrag with more compression options (levels, none, sticky)
- ioctl metadata preallocation
- ioctl metadata readahead
- ioctl cube search (not linear space like search)
- ioctl start/wait sync rework, drop async commit
- ioctl search with ioctl to node header
- send v3 and beyond
- one checksum for the whole filesystem, subvolume
- (wip) background autobalance
- (done) ioctl scrub (Qu)
- (done, experimental) raid1* load balancing, test and verify algorithms,
  promote to default the best one (rr)

# btrfs-progs

- mkfs, refactoring, cleanups
- dump checksums
- benchmarking command group (hashes, compression, heuristic)
- properties - compression set level
- subvol delete sync - option to wait until cleanup
- replace + autoresize
- replace smaller device
- send/receive by a KTLS, to a given fd (pipe, socket)
- merge btrfstune to main tool
- convert from xfs
- explain balance filters
- fuse module
- verbose resize
- user:group map for send/receive
- repair, restore
- file dedupe interface
- clone filesystem
- search API
- image format v2
- fi du with compression (compsize)
- subvolume list rework
- mkfs device spec, size, slack
- fsck progress, print last error
- verbosity level review
- error handling
- defrag, symlinks, cross-subvolume, cross-mount, cross-fs
- file extent map
- quick-test.c rework or delete
- merge remaining standalone tools to btrfs (map-logical, select-super,
  find-root, image?, mkfs?)
- scan filesystem for features, remove
- defrag file type heuristics
- TAP as testing output
- configurable columns, sorting, filtering, for all relevant commands (like util-linux)
- filesystem insights (device span)
- (experimental) file reflink interface
- (continued) json output
- (continued) libbtrfsutil update
- (continued) kernel code sync
- (continued) kerncompat.h cleanup
- (done) CI again, GH seem to work, update as needed
- (done) accelerated builtin crypto implementation
- (done) switching checksums
- (done) mkfs add compression support
- (done) dump chunks
- (done) autoremove qgroup for deleted subvolume (kernel)
- (done) libbtrfs redux, do not touch

## Docs

- complete sysfs docs
- quick start
- administration guide
- cross references
- explained examples
- move more pages from wiki to RST
- developer practices, coding style, patterns
- image format docs
- ioctl documentation
